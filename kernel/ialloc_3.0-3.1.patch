--- linux/fs/ext4/ialloc.c
+++ linux/fs/ext4/ialloc.c
@@ -331,6 +331,50 @@
 	}
 	return ret;
 }
+
+/* ADAM PDE: linear alloc for directories */
+static int find_group_dir_linear(struct super_block *sb, struct inode *parent,
+				ext4_group_t *best_group)
+{
+	ext4_group_t ngroups = ext4_get_groups_count(sb);
+	struct ext4_group_desc *desc, *best_desc = NULL;
+	ext4_group_t group;
+	int ret = -1;
+
+	for (group = 0; group < ngroups; group++) {
+		desc = ext4_get_group_desc(sb, group, NULL);
+		if (desc && ext4_free_inodes_count(sb, desc)) {
+			*best_group = group;
+			ret = 0;
+			break;
+		}
+	}
+	return ret;
+}
+
+/* ADAM PDE: linear alloc for files */
+static int find_group_other_linear(struct super_block *sb, struct inode *parent,
+				ext4_group_t *best_group)
+{
+	ext4_group_t ngroups = ext4_get_groups_count(sb);
+	unsigned int freei, freeb;
+	struct ext4_group_desc *desc, *best_desc = NULL;
+	ext4_group_t group;
+	int ret = -1;
+
+	for (group = 0; group < ngroups; group++) {
+		desc = ext4_get_group_desc(sb, group, NULL);
+		if (desc && ext4_free_inodes_count(sb, desc)) {
+		    if (ext4_free_blks_count(sb, desc)) {
+			    *best_group = group;
+			    ret = 0;
+			    break;
+			}
+		}
+	}
+	return ret;
+}
+
 
 #define free_block_ratio 10
 
@@ -650,7 +694,8 @@
 		*group = parent_group + flex_size;
 		if (*group > ngroups)
 			*group = 0;
-		return find_group_orlov(sb, parent, group, mode, NULL);
+/* ADAM PDE:  */
+		return find_group_other_linear(sb, parent, group);
 	}
 
 	/*
@@ -833,6 +878,15 @@
 	ei = EXT4_I(inode);
 	sbi = EXT4_SB(sb);
 
+/* ADAM PDE: linear alloc */
+
+	if (S_ISDIR(mode)) {
+		ret2 = find_group_dir_linear(sb, dir, &group);
+	} else
+		ret2 = find_group_other_linear(sb, dir, &group);
+
+
+/*
 	if (!goal)
 		goal = sbi->s_inode_goal;
 
@@ -864,6 +918,8 @@
 			ret2 = find_group_orlov(sb, dir, &group, mode, qstr);
 	} else
 		ret2 = find_group_other(sb, dir, &group, mode);
+
+*/
 
 got_group:
 	EXT4_I(dir)->i_last_alloc_group = group;
